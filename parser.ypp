%{
    #include <iostream>
    #include "hw3_output.hpp"
    #include "scope.hpp"
    #include "node.hpp"
    #include "Symbol.hpp"
    #define YYSTYPE Node *
    using namespace std;
    using namespace output;
    extern int yylineno;
    extern char* yytext;
    extern size_t yyleng;
    extern int yylex();
    void yyerror(const char* msg);
    ScopeManager scopeManager;
    void initialize_scope_manager() {
        scopeManager.insert_function("print", "void", "string");
        scopeManager.insert_function("printi", "void", "int");
        scopeManager.insert_function("readi", "int", "int");
        scopeManager.add_scope();
    }
    int loop_counter = 0;
    bool is_numeric(string type){
        // cout << "in is_numeric, type: " << type << endl;
        return type == "int" || type == "byte";
    }
    bool can_implicit_cast(string from, string to){
        return (from == "byte" && to == "int");
    }
    string dominant(string left, string right) { 
        // std::cout << "in dominant, left: " << left << ", right: " << right << std::endl;
        if (left == "bool" && right == "bool") {
            return "bool";
        }
        if (left == "int" || right == "int") {
            return "int";
        }
        else {
            return "byte";
        }
    }

%}
/* %union yystype{
    int num;
    char* str;
    NType* type;
    NIdentifier* id;
    NExpression* expr;
    NInteger* integer;
    NCall* call;
    NStatement* stmt;
} */

%start prog
%token INT BYTE B BOOL TRUE FALSE RETURN BREAK CONTINUE WHILE SC STRING ID NUM
%nonassoc LBRACE RBRACE
%right ASSIGN
%left OR
%left AND
%left EQ NEQ
%left GT GTE LT LTE
%left ADD SUB
%left MUL DIV
%right NOT
%left LPAREN RPAREN
%nonassoc IF
%nonassoc ELSE

/* %type <type> type
%type <id> ID
%type <integer> NUM
%type <expr> expr
%type <expr> call
%type <stmt> stmt */
%%

prog: stmts { /* placeholder */ };

stmts: stmt { /* placeholder */ } | stmts stmt { /* placeholder */ }; 

stmt:
    LBRACE startScope stmts RBRACE endScope |
    type ID SC                              { 
                                            string type = ((Ntype*)$1)->get();
                                            string name = ((NIdentifier*)$2)->get();
                                            delete $1;
                                            delete $2;
                                            if (not scopeManager.insert_symbol(name, type)){
                                                errorDef(yylineno, name);
                                                exit(1);
                                            }
                                            } |
    type ID ASSIGN expr SC                  { 
                                            string type = ((Ntype*)$1)->get();
                                            string name = ((NIdentifier*)$2)->get();
                                            string expr_type = ((NExpression*)$4)->getType();
                                            delete $1;
                                            delete $2;
                                            delete $4;
                                            // add casting
                                            if (type != expr_type && !can_implicit_cast(expr_type, type)){
                                                errorMismatch(yylineno);
                                                exit(1);
                                            }
                                            if (not scopeManager.insert_symbol(name, type)){
                                                errorDef(yylineno, name);
                                                exit(1);
                                            }
                                            } |
    ID ASSIGN expr SC                       { 
                                            string name = ((NIdentifier*)$1)->get();
                                            if (not scopeManager.is_declared(name)){
                                                errorUndef(yylineno, name);
                                                exit(1);
                                            }
                                            string type = scopeManager.get_symbol(name)->get_type();
                                            string val_type = ((NExpression*)$3)->getType();
                                            delete $1;
                                            delete $3;
                                            // add casting
                                            if (type != val_type){
                                                errorMismatch(yylineno);
                                                exit(1);
                                            }
                                            } |
    call SC                                 { $$ = $1; } |
    RETURN SC                               { 
                                            // does nothing?
                                            } |
    IF LPAREN expr RPAREN stmt              { 
                                            if (((NExpression*)$3)->getType() != "bool"){
                                                errorMismatch(yylineno);
                                                exit(1);
                                            }
                                            scopeManager.add_scope();
                                            $$ = $5;
                                            scopeManager.delete_scope();
                                            } |
    IF LPAREN expr RPAREN stmt ELSE stmt    { /* placeholder */ } |
    WHILE LPAREN expr RPAREN stmt           { 
                                            if (((NExpression*)$3)->getType() != "bool"){
                                                errorMismatch(yylineno);
                                                exit(1);
                                            }
                                            loop_counter++;
                                            scopeManager.add_scope();
                                            $$ = $5;
                                            scopeManager.delete_scope();
                                            loop_counter--;
                                            } |
    BREAK SC                                { 
                                            if (loop_counter == 0){
                                                errorUnexpectedBreak(yylineno);
                                                exit(1);
                                            }
                                            // loop_counter--;
                                            } |
    CONTINUE SC                             { 
                                            if (loop_counter == 0){
                                                errorUnexpectedContinue(yylineno);
                                                exit(1);
                                            }
                                            // loop_counter--;
                                            };

startScope:
    { scopeManager.add_scope(); };

endScope:
    { scopeManager.delete_scope(); };

call: 
    ID LPAREN expr RPAREN { 
                            string func_name = ((NIdentifier*)$1)->get();
                            if (not scopeManager.has_function(func_name)){
                                errorUndef(yylineno, func_name);
                                exit(1);
                            }
                            string expr_type = ((NExpression*)$3)->getType();
                            Function* func = scopeManager.get_function(func_name);
                            string arg_type = func->get_arg_type();
                            string ret_type = func->get_ret_type();
                            delete $1;
                            if (arg_type != expr_type){
                                errorPrototypeMismatch(yylineno, func_name, arg_type);
                                exit(1);
                            }
                            $$ = new NExpression(ret_type);
                            };

type: 
    INT { 
    $$ = new Ntype("int"); 
    } | 
    BYTE { 
    $$ = new Ntype("byte"); 
    } | 
    BOOL { 
    $$ = new Ntype("bool"); 
    };


expr:
    LPAREN expr RPAREN      { 
                            $$ = $2;
                            } |
    expr ADD expr           {
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            string newType = dominant(rightType, leftType);
                            $$ = new NExpression(newType);
                            } |
    expr SUB expr           { 
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            string newType = dominant(rightType, leftType);
                            $$ = new NExpression(newType);
                            } |
    expr MUL expr           { 
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            string newType = dominant(rightType, leftType);
                            $$ = new NExpression(newType);
                            } |
    expr DIV expr           { 
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            string newType = dominant(rightType, leftType);
                            $$ = new NExpression(newType);
                            } |
    ID                      { 
                            string name = ((NIdentifier*)$1)->get();
                            string type = scopeManager.get_symbol(name)->get_type();
                            delete $1;
                            if(!scopeManager.is_declared(name)){
                                errorUndef(yylineno, name);
                                exit(1);
                            }
                            $$ = new NExpression(type);
                            } |
    call                    { 
                            // string name = ((NCall*)$1)->get();
                            // string type = scopeManager.getType(name);
                            // delete $1;
                            // $$ = new NExpression(type);
                            $$ = $1;
                            } |
    NUM                     { 
                            delete $1;
                            $$ = new NExpression("int");
                            } |
    NUM B                   { 
                            int val = ((NInteger*)$1)->get();
                            delete $1;
                            string val_str = to_string(val);
                            if (val > 255){
                                errorByteTooLarge(yylineno, val_str);
                                exit(1);
                            }
                            $$ = new NExpression("byte");
                            } |
    STRING                  { $$ = new NExpression("string"); } |
    TRUE                    { $$ = new NExpression("bool"); } |
    FALSE                   { $$ = new NExpression("bool"); } |
    NOT expr                { 
                            if (((NExpression*)$2)->getType() != "bool"){
                                errorMismatch(yylineno);
                                delete $2;
                                exit(1);
                            }
                            $$ = $2;
                            } |
    expr AND expr           { 
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (leftType != "bool" || rightType != "bool"){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            $$ = new NExpression("bool");
                            } |
    expr OR expr            { 
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (leftType != "bool" || rightType != "bool"){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            $$ = new NExpression("bool");
                            } |
    expr EQ expr            {                             
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            $$ = new NExpression("bool"); 
                            } |
    expr NEQ expr           {                             
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            $$ = new NExpression("bool"); 
                            } |
    expr GT expr            {                             
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            $$ = new NExpression("bool"); 
                            } |
    expr GTE expr           {                             
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            $$ = new NExpression("bool"); 
                            } |
    expr LT expr            {                             
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            $$ = new NExpression("bool"); 
                            } |
    expr LTE expr           {                             
                            string leftType = ((NExpression*)$1)->getType();
                            string rightType = ((NExpression*)$3)->getType();
                            delete $3;
                            delete $1;
                            if (!is_numeric(leftType) || !is_numeric(rightType)){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            $$ = new NExpression("bool"); 
                            } |
    LPAREN type RPAREN expr { 
                            string type = ((Ntype*)$2)->get();
                            delete $2;
                            string expr_type = ((NExpression*)$4)->getType();
                            delete $4;
                            if (type != "int" && type != "byte"){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            if (expr_type != "int" && expr_type != "byte"){
                                errorMismatch(yylineno);
                                exit(1);
                            }
                            $$ = new NExpression(type);
                            };

%%

void yyerror(const char* msg) {
    errorSyn(yylineno);
    exit(0);
}

int main() {
    initialize_scope_manager();
    yyparse();
    scopeManager.delete_scope();
}