%{
    #include <iostream>
    #include "node.hpp"
    using namespace std;

    #define YYSTYPE Node*
    NBlock *rootBlock;
    int yylex();
    void yyerror(const char*);
%}

%union{
    Node *node;
    NExpression *expr;
    NStatement *stmt;
    NIdentifier *ident;
    NCall *ncall;
    NBinOp *nbinop;
    NRelOp *nrelop;
    int token;
    std::string string;
    std::vector<NExpression*> *exprlist;
    std::vector<NStatement*> *stmtlist;
    NumType* numtype;
}

%start prog
%type binop
%type <stmtlist> stmts
%type <stmt> stmt
%type <expr> expr
%type <ncall> call
%type <numtype> type
%token INT BYTE B BOOL TRUE FALSE RETURN BREAK CONTINUE IF ELSE WHILE SC ID NUM STRING LBRACE RBRACE
%left EQ NEQ GT GTE LT LTE
%left ADD SUB
%left MUL DIV AND OR
%right LPAREN RPAREN ASSIGN NOT 

%%

prog: stmts { rootBlock = $1 };

stmts: stmt { $$ = new NBlock($<stmt>1); } | stmt stmts { $1->statements.push_back($<stmt>2); }; /* note: might get issues with casting and pointers and shiet*/

stmt:
    LBRACE stmts RBRACE { $$ = $1; } |
    type ID SC { } |
    type ID ASSIGN expr SC {} |
    ID ASSIGN expr SC {} |
    call SC {} |
    RETURN SC { $$ = $1; } |
    IF LPAREN expr RPAREN stmt {} |
    IF LPAREN expr RPAREN stmt ELSE stmt {} |
    WHILE LPAREN expr RPAREN stmt {} |
    BREAK SC {$$ = $1; } |
    CONTINUE SC { $$ = $1; };

call: ID LPAREN expr RPAREN { $$ = new NCall($1, $3);};

type: INT { $$ = INT; } | BYTE { $$ = BYTE; } | BOOL { $$ = BOOL; };

binop: EQ | NEQ | GT | GTE | LT | LTE;

relop: ADD | SUB | MUL | DIV;

expr:
    LPAREN expr RPAREN { $$ = $2; } |
    expr binop expr {} |
    ID {} |
    call {} |
    NUM { $$ = new Nintager($1); } |
    NUM B { $$ = new Nintager($1, true); } |
    STRING { $$ = $1; } |
    TRUE { $$ = $1; } |
    FALSE { $$ = $1; } |
    NOT expr { $$ = new NNot($2); } |
    expr AND expr { $$ = new NAnd($1, $3); } |
    expr OR expr {$$ = new NOr($1, $3);} |
    expr relop expr { $$ = new NRelOp($1, $2, $3); } |
    LPAREN type RPAREN expr { $$ = new NCast($2, $4); };
%%